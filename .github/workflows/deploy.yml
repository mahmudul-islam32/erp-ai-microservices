name: Deploy ERP Microservices to AWS EC2

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  REGISTRY: ghcr.io
  IMAGE_PREFIX: mahmudul-islam32/erp

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: auth-service
            context: ./auth-service
            dockerfile: Dockerfile
          - name: inventory-service
            context: ./inventory-service
            dockerfile: Dockerfile
          - name: sales-service
            context: ./sales-service
            dockerfile: Dockerfile
          - name: frontend
            context: ./erp-frontend
            dockerfile: Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_AUTH_SERVICE_URL=${{ secrets.VITE_AUTH_SERVICE_URL || 'http://localhost:8001' }}
            VITE_INVENTORY_SERVICE_URL=${{ secrets.VITE_INVENTORY_SERVICE_URL || 'http://localhost:8002' }}
            VITE_SALES_SERVICE_URL=${{ secrets.VITE_SALES_SERVICE_URL || 'http://localhost:8003' }}
            VITE_STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy necessary files to EC2
          scp -o StrictHostKeyChecking=no -i private_key.pem \
            docker-compose.prod.yml $USER@$HOST:~/erp/docker-compose.yml
          
          # Deploy on EC2
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            set -e
            cd ~/erp
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest images
            docker compose pull
            
            # Deploy with zero downtime
            docker compose up -d --remove-orphans
            
            # Cleanup old images
            docker image prune -af --filter "until=24h"
            
            # Health check
            sleep 10
            curl -f http://localhost:8001/health || echo "Auth service health check failed"
            curl -f http://localhost:8002/health || echo "Inventory service health check failed"
            curl -f http://localhost:8003/health || echo "Sales service health check failed"
            
            echo "Deployment completed successfully!"
          EOF
          
          rm -f private_key.pem

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi

