name: Deploy ERP Microservices to AWS EC2

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  REGISTRY: ghcr.io
  IMAGE_PREFIX: mahmudul-islam32/erp

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: auth-service
            context: ./auth-service
            dockerfile: Dockerfile
          - name: inventory-service
            context: ./inventory-service
            dockerfile: Dockerfile
          - name: sales-service
            context: ./sales-service
            dockerfile: Dockerfile
          - name: frontend
            context: ./erp-frontend
            dockerfile: Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_AUTH_SERVICE_URL=${{ secrets.VITE_AUTH_SERVICE_URL || 'http://localhost:8001' }}
            VITE_INVENTORY_SERVICE_URL=${{ secrets.VITE_INVENTORY_SERVICE_URL || 'http://localhost:8002' }}
            VITE_SALES_SERVICE_URL=${{ secrets.VITE_SALES_SERVICE_URL || 'http://localhost:8003' }}
            VITE_STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy production docker-compose file to EC2
          scp -o StrictHostKeyChecking=no -i private_key.pem \
            docker-compose.prod.yml $USER@$HOST:~/erp/docker-compose.yml
          
          # Deploy on EC2
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOSSH'
            set -e
            
            # Create directory if it doesn't exist
            mkdir -p ~/erp
            cd ~/erp
            
            # Check if .env exists (optional, using defaults if not present)
            if [ -f .env ]; then
              echo "✅ Found .env file, loading custom configuration..."
              source .env
            else
              echo "ℹ️  No .env file found, using default configuration"
              echo "⚠️  WARNING: Using default MongoDB password 'password123'"
              echo "⚠️  WARNING: Using default JWT secret"
              echo "ℹ️  For production, create ~/erp/.env with secure values"
            fi
            
            # Set image variables from GitHub
            export IMAGE_REGISTRY=ghcr.io
            export IMAGE_PREFIX=${{ env.IMAGE_PREFIX }}
            export IMAGE_TAG=latest
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest images
            echo "Pulling latest images..."
            docker compose pull
            
            # Stop old containers
            echo "Stopping old containers..."
            docker compose down
            
            # Start services
            echo "Starting services..."
            docker compose up -d
            
            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 45
            
            # Check container status
            echo "Container status:"
            docker compose ps
            
            # Health check
            echo "Checking service health..."
            max_retries=5
            for i in $(seq 1 $max_retries); do
              if curl -f http://localhost:8001/health > /dev/null 2>&1; then
                echo "✅ Auth service is healthy"
                break
              else
                echo "⏳ Waiting for auth service (attempt $i/$max_retries)..."
                sleep 10
              fi
            done
            
            # Check logs for errors
            echo "Recent logs:"
            docker compose logs --tail=20
            
            # Cleanup old images
            echo "Cleaning up old images..."
            docker image prune -af --filter "until=24h" || true
            
            echo "✅ Deployment completed successfully!"
          EOSSH
          
          rm -f private_key.pem

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi

